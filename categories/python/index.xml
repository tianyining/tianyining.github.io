<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Brave New World</title>
    <link>https://tianyining.github.io/categories/python/</link>
    <description>Recent content in python on Brave New World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 25 Oct 2021 17:22:55 +0800</lastBuildDate><atom:link href="https://tianyining.github.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Plot_phV_Disp_all_Version1</title>
      <link>https://tianyining.github.io/post/Plot_phV_Disp_all/</link>
      <pubDate>Mon, 25 Oct 2021 17:22:55 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/Plot_phV_Disp_all/</guid>
      <description>说明 本篇 blog 记录在背景噪声互相关处理中，利用 AFTAN 提取频散曲线后，将所有台站对间提取出来的相速度频散曲线绘制在一张图上。 本篇 blog 使用的数据来自 PKU Su</description>
    </item>
    
    <item>
      <title>Plot_phV_disp_subplot_all_Version1</title>
      <link>https://tianyining.github.io/post/Plot_phV_disp_subplot_all/</link>
      <pubDate>Mon, 25 Oct 2021 17:13:26 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/Plot_phV_disp_subplot_all/</guid>
      <description>说明 本篇 blog 记录在背景噪声互相关处理中，利用 AFTAN 提取频散曲线后，python 批量绘图（10张），将每一个台站对间的频散曲线都画出来，共计 10 幅图。</description>
    </item>
    
    <item>
      <title>Plot_Single_disp_Version1</title>
      <link>https://tianyining.github.io/post/Plot_Single_disp/</link>
      <pubDate>Mon, 25 Oct 2021 17:02:14 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/Plot_Single_disp/</guid>
      <description>说明 本篇 blog 记录在背景噪声互相关处理中，利用 AFTAN 提取频散曲线后，绘制台站对间的相速度、群速度频散曲线。 本篇 blog 使用的数据来自 PKU Summer_202</description>
    </item>
    
    <item>
      <title>按照台站名整理互相关文件</title>
      <link>https://tianyining.github.io/post/Sort_CCFs_byStaName/</link>
      <pubDate>Sat, 23 Oct 2021 17:23:05 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/Sort_CCFs_byStaName/</guid>
      <description>本篇 blog 记录利用 python 实现将计算好的 CCFs 按照台站名进行整理，每一个以台站名命名的文件夹内部都包含 *Sta_N* 的所有互相关文件。 前期数据准备 1 2 3 4 * COR-M</description>
    </item>
    
    <item>
      <title>M00台站与其余所有台站的背景噪声互相关函数叠加示意图_COR_stack_2</title>
      <link>https://tianyining.github.io/post/COR_stack_M00/</link>
      <pubDate>Mon, 11 Oct 2021 18:06:47 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/COR_stack_M00/</guid>
      <description>说明 本篇 blog 展现在背景噪声互相关处理中，M00 台站与其余所有台站的背景噪声互相关函数示意图如何利用 python 进行绘制（参考 Three Station）。 Written by Shane Zhang</description>
    </item>
    
    <item>
      <title>两个接收台站在所有台站中的相对位置图_COR_stack_1</title>
      <link>https://tianyining.github.io/post/rec_station_map_ThreeStations/</link>
      <pubDate>Mon, 11 Oct 2021 17:55:38 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/rec_station_map_ThreeStations/</guid>
      <description>说明 本篇 blog 记录在背景噪声互相关处理中，两个接收台站与其他源台站之间的相对位置示意图（参考 Three Station 绘制）。 Written by Shane Zhang modified by Yining Tian 2021 代码及示意图 剔除两个接</description>
    </item>
    
    <item>
      <title>将.lst格式的文件转化为csv格式文件</title>
      <link>https://tianyining.github.io/post/lst2csv/</link>
      <pubDate>Mon, 11 Oct 2021 17:27:21 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/lst2csv/</guid>
      <description>说明 本篇 blog 记录利用 python 实现将 .lst 格式的文件转化为 txt 格式的文件，这里以将研究区域台站信息 station_mm.lst 整理为 station_MM.csv 为例。 数据准备 只需要研究区域的台站信息文件 station_mm.lst 。 代</description>
    </item>
    
    <item>
      <title>将所有格式化输出的相速度频散txt文件整理成带有分隔符的一个txt文件</title>
      <link>https://tianyining.github.io/post/Merge_txt_all/</link>
      <pubDate>Fri, 01 Oct 2021 14:49:35 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/Merge_txt_all/</guid>
      <description>说明 本篇 blog 记录利用 python 将所有 txt 文件合成为一个 txt 文件。将上一篇 blog 上一篇实现的格式化输出的所有 txt 文件整合为一个 txt 文件。 将所有格式化输出的相速度频散</description>
    </item>
    
    <item>
      <title>txt文件批量处理，实现格式化输出txt</title>
      <link>https://tianyining.github.io/post/txt_format/</link>
      <pubDate>Fri, 01 Oct 2021 14:29:11 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/txt_format/</guid>
      <description>说明 上一篇 blog 实现了利用 python 将 csv格式的文件转化为 txt格式（单一文件+批量处理，详情查看上一篇），本篇 blog 实现，将所有 txt 文件格式化输出。 批量处</description>
    </item>
    
    <item>
      <title>将CSV格式的文件转化为txt格式（单一文件&#43;批处理）</title>
      <link>https://tianyining.github.io/post/CSV2TXT/</link>
      <pubDate>Fri, 01 Oct 2021 14:11:53 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/CSV2TXT/</guid>
      <description>说明 本篇 blog 记录利用 python 实现将 csv 格式的文件转化为 txt 格式的文件，包含单一文件格式转换，也包含实现批处理的代码。 1. 实现将单一相速度频散文件由 csv 格式转</description>
    </item>
    
    <item>
      <title>Python文件的格式化输入输出</title>
      <link>https://tianyining.github.io/post/File_Format_IPO/</link>
      <pubDate>Thu, 23 Sep 2021 15:13:46 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/File_Format_IPO/</guid>
      <description>说明 Python 文件的格式化输入输出，基本格式化输出采用 % 方法，但是 format() 的功能更为强大，该函数把字符串当成一个模板，通过传入的参数进行格式化，并且使用 {}</description>
    </item>
    
    <item>
      <title>1D_Interpolate_All_dispfiles所有频散文件插值示例_Version1</title>
      <link>https://tianyining.github.io/post/1D_Interpolate_All_dispfiles_V1/</link>
      <pubDate>Thu, 23 Sep 2021 14:50:21 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/1D_Interpolate_All_dispfiles_V1/</guid>
      <description>本篇 blog 记录利用 python 对所有频散文件进行插值的示例，对其中的 period phase_velocity 相应的两列数据进行插值，插值的结果是每秒一个数据点，及其相对应的插值过后的相速度。</description>
    </item>
    
    <item>
      <title>1D_Interpolate_single_dispfile单一频散文件插值示例_Version2</title>
      <link>https://tianyining.github.io/post/1D_Interpolate_single_dispfile_V2/</link>
      <pubDate>Wed, 22 Sep 2021 20:06:57 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/1D_Interpolate_single_dispfile_V2/</guid>
      <description>本篇 blog 记录利用 python 对单一频散文件进行插值的示例，实现将 AFTAN 计算出来的某一个频散文件（原始未经任何处理），对其中的 period phase_velocity 相应的两列数据进行插值，插值</description>
    </item>
    
    <item>
      <title>1D_Interpolate_single_dispfile单一频散文件插值示例_Version1</title>
      <link>https://tianyining.github.io/post/1D_Interpolate_single_dispfile/</link>
      <pubDate>Mon, 20 Sep 2021 21:55:11 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/1D_Interpolate_single_dispfile/</guid>
      <description>本篇 blog 记录利用 python 对单一频散文件进行插值的示例，实现将 AFTAN 计算出来的某一个频散文件（原始未经任何处理），对其中的 period phase_velocity 相应的两列数据进行插值，并绘</description>
    </item>
    
    <item>
      <title>AFTAN_to_DSurfTomo频散文件数据格式转换_def_Version</title>
      <link>https://tianyining.github.io/post/AFTAN_to_DSurfTomo_def/</link>
      <pubDate>Mon, 20 Sep 2021 21:25:06 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/AFTAN_to_DSurfTomo_def/</guid>
      <description>本篇 blog 记录利用 python 定义函数的形式，实现将 AFTAN 计算出来的多个单一频散文件（原始未经任何处理）整理成 DSurfTomo 反演所需的文件数据格式，实现批量处理，格式化输</description>
    </item>
    
    <item>
      <title>AFTAN_to_DSurfTomo频散文件数据格式转换_Version1</title>
      <link>https://tianyining.github.io/post/AFTAN_to_DSurfTomo/</link>
      <pubDate>Mon, 20 Sep 2021 19:49:15 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/AFTAN_to_DSurfTomo/</guid>
      <description>本篇 blog 记录利用 python 实现将 AFTAN 计算出来的多个单一频散文件（原始未经任何处理）整理成 DSurfTomo 反演所需的文件数据格式，实现批量处理，格式化输出。 前期数据准备</description>
    </item>
    
    <item>
      <title>Python_Basemap</title>
      <link>https://tianyining.github.io/post/python_basemap/</link>
      <pubDate>Wed, 25 Aug 2021 23:41:38 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/python_basemap/</guid>
      <description>Basemap 环境安装 说明 在 python=3.9 的 pygmt 环境中无法安装 basemap ，因此创建新的 conda 环境。 1 2 3 $ conda create --name basemap $ conda activate basemap $ conda install -c anaconda basemap</description>
    </item>
    
    <item>
      <title>Jupyter Notebook使用技巧</title>
      <link>https://tianyining.github.io/post/jupyter_notebook_manual/</link>
      <pubDate>Thu, 15 Jul 2021 14:01:35 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/jupyter_notebook_manual/</guid>
      <description>说明 这篇 blog 记录 jupyter notebook 下的使用技巧。 1. jupyter notebook 深色主题背景下图表坐标看不清 将 jupyter notebook 设置为深色背景，但深色背景画图就会遇到图表坐标文字显示看不清的问题。</description>
    </item>
    
    <item>
      <title>Spyder的安装及使用</title>
      <link>https://tianyining.github.io/post/Spyder/</link>
      <pubDate>Wed, 07 Jul 2021 20:28:07 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/Spyder/</guid>
      <description>Spyder 的安装 建议新建 conda 虚拟环境，避免包污染。 1 2 3 $ conda create -n spyder-env spyder=4 python=3.8 $ conda install numpy scipy pandas matplotlib sympy cython $ conda install -c conda-forge obspy 注意：在 spyder-env 环境下直接 conda install obspy 会失败。 Anaconda 中 Spyder4.0 后使用 kite 代</description>
    </item>
    
    <item>
      <title>Ubuntu20.04卸载并重新安装Anaconda</title>
      <link>https://tianyining.github.io/post/Anaconda_remove/</link>
      <pubDate>Wed, 07 Jul 2021 09:17:54 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/Anaconda_remove/</guid>
      <description>说明 台式机 Ubuntu18.04，Anaconda 无法使用 conda 命令更新或安装，尝试多次未找出原因，因此重装 Anaconda 。 卸载 Anaconda 卸载 anaconda 的步骤如下： 删除整个</description>
    </item>
    
    <item>
      <title>Sublime Test3 Mac配置编程环境</title>
      <link>https://tianyining.github.io/post/Sublime_Test3_Mac/</link>
      <pubDate>Sun, 06 Jun 2021 12:33:57 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/Sublime_Test3_Mac/</guid>
      <description>安装 Sublime Text 3 下载地址：https://www.sublimetext.com/3 安装 Package Control 为什么要安装 Package Control ? Package Control是一个管理Subli</description>
    </item>
    
    <item>
      <title>Pycharm的安装及配置</title>
      <link>https://tianyining.github.io/post/pycharm/</link>
      <pubDate>Sun, 14 Mar 2021 16:11:38 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/pycharm/</guid>
      <description>引言 Pycharm 是一款功能十分强大的 IDE，Ubuntu18.04 在安装 Pycharm 过程中遇到了一些问题，特此记录。 Ubuntu18.04 安装 pycharm 解决安装界面卡死问题 最初 Ubuntu18.04 安装 pycharm 时，</description>
    </item>
    
    <item>
      <title>Ubuntu显卡驱动</title>
      <link>https://tianyining.github.io/post/ubuntu_Graphics_card/</link>
      <pubDate>Tue, 22 Sep 2020 13:24:07 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/ubuntu_Graphics_card/</guid>
      <description>写在最前面 在Ubuntu终端手贱安装了Nvidia显卡驱动，重新开机后发现无法进入图形可视化界面，通过以下操作拯救了Ubuntu系统。 解决步</description>
    </item>
    
    <item>
      <title>Ubuntu18.04_python科学计算发行版Anaconda安装</title>
      <link>https://tianyining.github.io/post/ubuntu_anaconda/</link>
      <pubDate>Sat, 12 Sep 2020 20:02:01 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/ubuntu_anaconda/</guid>
      <description>安装 Anaconda 1. 下载 Anaconda ​ 进入 Anaconda 官方下载页面，会看到类似下图的下载页面。根据自己的系统选择对应的安装包（通常选择下图中红框圈出的安装包）。 2. 安装 Anaconda $ bash</description>
    </item>
    
  </channel>
</rss>
