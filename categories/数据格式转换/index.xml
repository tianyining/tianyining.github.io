<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据格式转换 on Brave New World</title>
    <link>https://tianyining.github.io/categories/%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/</link>
    <description>Recent content in 数据格式转换 on Brave New World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 25 Apr 2022 15:58:11 +0800</lastBuildDate><atom:link href="https://tianyining.github.io/categories/%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DSurfTomo_CheckboardTest</title>
      <link>https://tianyining.github.io/post/DSurfTomo_CheckboardTest/</link>
      <pubDate>Mon, 25 Apr 2022 15:58:11 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/DSurfTomo_CheckboardTest/</guid>
      <description>说明 本篇 blog 用于记录如何使用 DSurfTomo 进行检测板恢复测试，主要包含如何设计棋盘网格的速度异常尺寸，生成棋盘网格模型，以及 Synthetic Test 恢复性测试。本篇 blog 使用的测</description>
    </item>
    
    <item>
      <title>DSurfTomo_InitMOD</title>
      <link>https://tianyining.github.io/post/DSurfTomo_InitMOD/</link>
      <pubDate>Fri, 15 Apr 2022 15:56:56 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/DSurfTomo_InitMOD/</guid>
      <description>说明 本篇 blog 用于记录如何根据已知的初始速度模型（一维或三维），生层 DSurfTomo 反演所需的初始速度模型 MOD ，1d_MOD 是根据 Yiming Bai 手动挑选的 CDisp 通过计算生成的</description>
    </item>
    
    <item>
      <title>DSurfTomo频散文件数据格式转换 &amp; 反演初始速度模型</title>
      <link>https://tianyining.github.io/post/AFTAN_to_DSurfTomo_def/</link>
      <pubDate>Fri, 25 Feb 2022 21:25:06 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/AFTAN_to_DSurfTomo_def/</guid>
      <description>说明 本篇 blog 记录利用 python 定义函数的形式，实现将 AFTAN 计算出来的多个单一频散文件（原始未经任何处理）整理成 DSurfTomo 反演所需的文件数据格式，实现批量处理，格式</description>
    </item>
    
    <item>
      <title>QC_Version3_Region</title>
      <link>https://tianyining.github.io/post/Disp_QualityControl_Region/</link>
      <pubDate>Wed, 23 Feb 2022 10:54:39 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/Disp_QualityControl_Region/</guid>
      <description>本篇 blog 记录对研究区域按照构造特征进行分区，再分区提取频散曲线和对频散曲线质量控制，粗略分区标准： 1 2 3 1) Both sations in Myanmar; 2) Both stations in Yunnan; 3) Cross Region; Update 相较于 QC_Version2 的</description>
    </item>
    
    <item>
      <title>Plot_RayPaths_Myanmar_Version2</title>
      <link>https://tianyining.github.io/post/Plot_RayPaths_Myanmar_Version2/</link>
      <pubDate>Tue, 08 Feb 2022 22:51:05 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/Plot_RayPaths_Myanmar_Version2/</guid>
      <description>说明 当完成频散曲线质量控制QC_Version2，并将频散数据整理成以整数周期命名的形式，接下来可以绘制不同周期的射线路径分布图 以 10s 周期为例</description>
    </item>
    
    <item>
      <title>QC_Version2</title>
      <link>https://tianyining.github.io/post/QC_Version2/</link>
      <pubDate>Fri, 28 Jan 2022 20:45:25 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/QC_Version2/</guid>
      <description>本篇 blog 记录如何对 AFTAN 提取出的频散曲线进行质量控制，质量控制步骤主要包含两步：1) 传统频散曲线质量控制；2) 根据实际数据对频散数据点按偏离标准差</description>
    </item>
    
    <item>
      <title>Plot_period_raypath_version2</title>
      <link>https://tianyining.github.io/post/plot_period_raypath_version2/</link>
      <pubDate>Tue, 25 Jan 2022 20:56:45 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/plot_period_raypath_version2/</guid>
      <description>说明 本篇 blog 记录如何利用 AFTAN 从互相关对称分量中提取频散文件，计算不同周期的射线路径，并最终绘制绘制不同周期的台站对射线路径分布图； Here we will calculate the paths. In</description>
    </item>
    
    <item>
      <title>Plot_RayPaths_Myanmar_Version1</title>
      <link>https://tianyining.github.io/post/Plot_RayPaths_Myanmar_Version1/</link>
      <pubDate>Sun, 09 Jan 2022 12:13:28 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/Plot_RayPaths_Myanmar_Version1/</guid>
      <description>Making a 2-D map of surface wave velocities There are two further steps to go from a set of dispersion curves to a 3-D map of the subsurface. The first step is to make a 2-D period map. When we measure a dispersion curve between two stations. We are observing the effects of the subsurface over the entire distance along these two stations. The purpose of the 2-D period map</description>
    </item>
    
    <item>
      <title>Myanmar_Disp_Statistics</title>
      <link>https://tianyining.github.io/post/Myanmar_Disp_Statistics/</link>
      <pubDate>Tue, 28 Dec 2021 10:12:19 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/Myanmar_Disp_Statistics/</guid>
      <description>说明 利用 AFTAN 提取出频散曲线后，经过前两步质量控制后：1) 剔除挑错支的频散； 2) 剔除掉低信噪比的相速度数据点。对于频散数据的离群点需要进一步剔除，</description>
    </item>
    
    <item>
      <title>使用箱型图的方法对频散文件中的异常值分析处理及可视化</title>
      <link>https://tianyining.github.io/post/Box_Del_Outlier_Myanmar/</link>
      <pubDate>Sun, 26 Dec 2021 15:59:10 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/Box_Del_Outlier_Myanmar/</guid>
      <description>说明 在频散曲线质量控制时，最初采用计算不同整数周期相速度平均值以及标准差的方法，将偏离 2~3 倍标准差以外的数据点剔除。但是这种判别处理的原理及方</description>
    </item>
    
    <item>
      <title>将频散文件(After_DEL_SNR)整理成以整数周期命名的多个频散文件</title>
      <link>https://tianyining.github.io/post/Seperate_Disp_Period_Myanmar/</link>
      <pubDate>Sat, 25 Dec 2021 20:55:13 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/Seperate_Disp_Period_Myanmar/</guid>
      <description>说明 实现 python 批量处理，将两步质量控制后的台站对频散文件（剔除挑错支 &amp;amp; 低信噪比数据点），整理成分别以整数周期命名的多个频散文件，其中整理后的每个</description>
    </item>
    
    <item>
      <title>Merge_DISP and SNR_interp_Version2</title>
      <link>https://tianyining.github.io/post/AFTAN_Interp_Format_DISP/</link>
      <pubDate>Tue, 30 Nov 2021 21:34:00 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/AFTAN_Interp_Format_DISP/</guid>
      <description>说明 本篇 blog 记录利用 python 实现将 AFTAN 提取出的原始频散文件，利用样条插值，整合计算出的信噪比文件（包括插值部分），合并整理成以台站对命名的频散文件，最</description>
    </item>
    
    <item>
      <title>QC_Version1</title>
      <link>https://tianyining.github.io/post/QC_Version1/</link>
      <pubDate>Thu, 11 Nov 2021 19:25:39 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/QC_Version1/</guid>
      <description>本篇 blog 记录利用 python，对 /MM_DISP_Interp/ 中的全部相速度频散文件进行初步的质量控制。 QCstep1_Del_extremly_Bad 将存在极度异常值的相速度频散曲线，整支删除；具体来说，就是将频散</description>
    </item>
    
    <item>
      <title>从互相关SAC文件中提取台站对dist并按震中距大小排列整合</title>
      <link>https://tianyining.github.io/post/get_dist_and_Format/</link>
      <pubDate>Sat, 06 Nov 2021 12:32:13 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/get_dist_and_Format/</guid>
      <description>本篇 blog 记录利用 python，提取所有台站对互相关 SAC 文件的 dist ，并按照震中距由小到大排列整合文件。输出文件包含三列：dist sta1 sta2。 说明 本篇</description>
    </item>
    
    <item>
      <title>计算所有台站对不同周期相速度频散曲线的标准差&amp;整合文件</title>
      <link>https://tianyining.github.io/post/cal_phase_disp_std/</link>
      <pubDate>Fri, 05 Nov 2021 14:42:47 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/cal_phase_disp_std/</guid>
      <description>本篇 blog 记录利用 python，将所有台站对的不同周期的相速度频散文件 disper_curves_compute （包含两列 period &amp;amp; phase velocity）计算对应的标准差，并最终整合为一个文件</description>
    </item>
    
    <item>
      <title>Merge_DISP and SNR_interp_Version1</title>
      <link>https://tianyining.github.io/post/Merge_DISPandSNR/</link>
      <pubDate>Thu, 28 Oct 2021 13:35:12 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/Merge_DISPandSNR/</guid>
      <description>说明 本篇 blog 记录利用 python 实现将 AFTAN 提取出的原始频散文件和计算出的信噪比文件（包括插值部分）合并整理成以台站对命名的频散文件，每个频散文件包含三列信</description>
    </item>
    
    <item>
      <title>1D_Interpolate_disp&#43;snr_Version2</title>
      <link>https://tianyining.github.io/post/1D_Interpolate_disp&#43;snr_Version2/</link>
      <pubDate>Tue, 26 Oct 2021 14:45:09 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/1D_Interpolate_disp&#43;snr_Version2/</guid>
      <description>本篇 blog 记录利用 python，根据 AFTAN 提取的频散文件中的周期，对相应台站对的信噪比文件进行插值，并最终将不同台站对的频散文件整理成包含三列数据的</description>
    </item>
    
    <item>
      <title>1D_Interpolate_disp&#43;snr_Version1</title>
      <link>https://tianyining.github.io/post/1D_Interpolate_disp&#43;snr_Version1/</link>
      <pubDate>Tue, 26 Oct 2021 13:19:43 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/1D_Interpolate_disp&#43;snr_Version1/</guid>
      <description>本篇 blog 记录利用 python根据单一频散文件 COR_H1250_H1530.SAC_s_2_DISP.1 中的周期，对计算出来的信噪比 COR_H1250_H1530.SAC_s_snr.txt文件进行插</description>
    </item>
    
    <item>
      <title>按照台站名整理互相关文件</title>
      <link>https://tianyining.github.io/post/Sort_CCFs_byStaName/</link>
      <pubDate>Sat, 23 Oct 2021 17:23:05 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/Sort_CCFs_byStaName/</guid>
      <description>本篇 blog 记录利用 python 实现将计算好的 CCFs 按照台站名进行整理，每一个以台站名命名的文件夹内部都包含 *Sta_N* 的所有互相关文件。 前期数据准备 1 2 3 4 * COR-M</description>
    </item>
    
    <item>
      <title>将.lst格式的文件转化为csv格式文件</title>
      <link>https://tianyining.github.io/post/lst2csv/</link>
      <pubDate>Mon, 11 Oct 2021 17:27:21 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/lst2csv/</guid>
      <description>说明 本篇 blog 记录利用 python 实现将 .lst 格式的文件转化为 txt 格式的文件，这里以将研究区域台站信息 station_mm.lst 整理为 station_MM.csv 为例。 数据准备 只需要研究区域的台站信息文件 station_mm.lst 。 代</description>
    </item>
    
    <item>
      <title>将所有格式化输出的相速度频散文件整理成带有分隔符的一个txt文件</title>
      <link>https://tianyining.github.io/post/Merge_txt_all/</link>
      <pubDate>Fri, 01 Oct 2021 14:49:35 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/Merge_txt_all/</guid>
      <description>说明 本篇 blog 记录利用 python 将所有 txt 文件合成为一个 txt 文件。将上一篇 blog 上一篇实现的格式化输出的所有 txt 文件整合为一个 txt 文件。 1. 将所有格式化输出的相速度频</description>
    </item>
    
    <item>
      <title>txt文件批量处理，实现格式化输出txt</title>
      <link>https://tianyining.github.io/post/txt_format/</link>
      <pubDate>Fri, 01 Oct 2021 14:29:11 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/txt_format/</guid>
      <description>说明 上一篇 blog 实现了利用 python 将 csv格式的文件转化为 txt格式（单一文件+批量处理，详情查看上一篇），本篇 blog 实现，将所有 txt 文件格式化输出。 批量处</description>
    </item>
    
    <item>
      <title>将CSV格式的文件转化为txt格式（单一文件&#43;批处理）</title>
      <link>https://tianyining.github.io/post/CSV2TXT/</link>
      <pubDate>Fri, 01 Oct 2021 14:11:53 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/CSV2TXT/</guid>
      <description>说明 本篇 blog 记录利用 python 实现将 csv 格式的文件转化为 txt 格式的文件，包含单一文件格式转换，也包含实现批处理的代码。 1. 实现将单一相速度频散文件由 csv 格式转</description>
    </item>
    
    <item>
      <title>Python文件的格式化输入输出</title>
      <link>https://tianyining.github.io/post/File_Format_IPO/</link>
      <pubDate>Thu, 23 Sep 2021 15:13:46 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/File_Format_IPO/</guid>
      <description>说明 Python 文件的格式化输入输出，基本格式化输出采用 % 方法，但是 format() 的功能更为强大，该函数把字符串当成一个模板，通过传入的参数进行格式化，并且使用 {}</description>
    </item>
    
    <item>
      <title>1D_Interpolate_All_dispfiles所有频散文件插值示例_Version1</title>
      <link>https://tianyining.github.io/post/1D_Interpolate_All_dispfiles_V1/</link>
      <pubDate>Thu, 23 Sep 2021 14:50:21 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/1D_Interpolate_All_dispfiles_V1/</guid>
      <description>本篇 blog 记录利用 python 对所有频散文件进行插值的示例，对其中的 period phase_velocity 相应的两列数据进行插值，插值的结果是每秒一个数据点，及其相对应的插值过后的相速度。</description>
    </item>
    
    <item>
      <title>1D_Interpolate_single_dispfile单一频散文件插值示例_Version2</title>
      <link>https://tianyining.github.io/post/1D_Interpolate_single_dispfile_V2/</link>
      <pubDate>Wed, 22 Sep 2021 20:06:57 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/1D_Interpolate_single_dispfile_V2/</guid>
      <description>本篇 blog 记录利用 python 对单一频散文件进行插值的示例，实现将 AFTAN 计算出来的某一个频散文件（原始未经任何处理），对其中的 period phase_velocity 相应的两列数据进行插值，插值</description>
    </item>
    
    <item>
      <title>1D_Interpolate_single_dispfile单一频散文件插值示例_Version1</title>
      <link>https://tianyining.github.io/post/1D_Interpolate_single_dispfile/</link>
      <pubDate>Mon, 20 Sep 2021 21:55:11 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/1D_Interpolate_single_dispfile/</guid>
      <description>本篇 blog 记录利用 python 对单一频散文件进行插值的示例，实现将 AFTAN 计算出来的某一个频散文件（原始未经任何处理），对其中的 period phase_velocity 相应的两列数据进行插值，并绘</description>
    </item>
    
    <item>
      <title>AFTAN_to_DSurfTomo频散文件数据格式转换_Version1</title>
      <link>https://tianyining.github.io/post/AFTAN_to_DSurfTomo/</link>
      <pubDate>Mon, 20 Sep 2021 19:49:15 +0800</pubDate>
      
      <guid>https://tianyining.github.io/post/AFTAN_to_DSurfTomo/</guid>
      <description>本篇 blog 记录利用 python 实现将 AFTAN 计算出来的多个单一频散文件（原始未经任何处理）整理成 DSurfTomo 反演所需的文件数据格式，实现批量处理，格式化输出。 前期数据准备</description>
    </item>
    
  </channel>
</rss>
